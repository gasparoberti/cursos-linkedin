se almacena la version original y un conjunto de cambios SCCS
almacena la ultima version y un conjunto de cambios RCS
ninguno de los dos permitía acceder a multiples archivos.

accede a multiples archivos de todo el proyectp. repos multiusuarios. trabajo concurrente CSV o SVN (trackean versiones)

Distributed version control: NO TIENE UN SERVER CENTRAL como en cvs o svn. todos los repos son iguales.
se almacenan conjuntos de cambios en vez de versiones. 
incentiva la participacion y forkeo de proyectos. los devs pueden trabajar independientemente. se pueden agregar cambios para incluir o rechazar.

wich git -> te redirige al path en el bin donde está instalado
git --version

Configuration:
System: /etc/gitconfig
	Program Files\Git\etc\gitconfig
git config --system

User:	~/.gitconfig
	$HOME\.gitconfig
git config --global user.name "nombre"
		    user.email "email"
git config --list	-> lista todas las conf
git config --global core.editor "notepad.exe"
git config --global color.ui true

Git Auto-Completion	mac y linux te autocompleta con tab

Git Help:	git help 
	git help log <-> man git-log (unix)	q sale de la ayuda


Project: my_project/.git/config
git config


Inicializar un repo

git init	inicializa un repo
ls -la 		lista los archivos (incluidos los ocultos -> .git, etc..)
ls -la .git 	lista todos el contenido que tiene .git (HEAD, config, etc..)
cat .git/config me muestra lo que tiene el archivo config

si elimino el directorio .git git será removido del proyecto


git add .	agrega todos los archivos en la carpeta donde estoy parado. quedando listos para commitear
git commit -m "Initila commit"

Buenas practicas para mjes de commit:
	descripcion corta de 50 caracteres o menos. si se necesita una descripcion mayor se la agrega a continuacion separandola con una linea en blanco
	tratar de que cada linea tenga como maximo 72 caracteres para que se pueda ver bien en los distintos medios (movil, github, email, etc...)
	escribir los mjes en presente y no en pasado
	agregar un numero de seguimiento 
	distinguir con distintos "tags" como "[css, js]" o "bugfix:" o "#3536 -"
	mjes claros y descriptivos

para hacer saltos de linea no hay que cerrar la comilla doble del final. se abre la inicial y despues se escribe todo lo que se quiera incluyendo saltos de linea o lineas en blanco. cuando se quiera terminar el mje se cierra la comilla y se presiona enter.

git log 	te muestra el log de todos los commits que hayas hecho.
		cada commit tiene un id unico, autor, fecha y mje.
git help log 	te muestra las diferentes opciones de parametros que tiene log.
git log -n 5 te muestra los 5 commits mas recientes.
git log --since=2021-10-23	te muestra los comentarios desde esa fecha (no muestra los de esa fecha por ejemplo --since=2021-10-24 no me muestra nada)
	until es igual que since pero funciona como delimitador hacia atras
git log --grep "Init"	busca a partir de expresiones regulares. es key sensitive

Git workflow:

	/-	repository	-\
git commit
       	=	staging index	 |
git add
	\-	working		-/

Hash Values:
git genera un checksum por cada conjunto de cambios
mismos datos tienen siempre el mismo checksum
garantiza la integridad de los datos
si se cambia la data cambia el checksum 
el checksum es un string hexadecimal de 40 caracteres (0-9, a-f)

HEAD pointer: ubica el puntero en el último commit. parte de la rama master pero con cada commit se va corriendo el head. 
		si se crea un nuevo branch se mueve el head
		en el head se guarda el checksum del commit
ls -la .git
cat .git/HEAD
cat .git/refs/heads/master
obtengo el checksum (lo puedo verificar con git log y ver que el sha (checksum) es el mismo

git status	muestra los archivos que faltan agregar para commitear (los agrega al staging area) se llaman untracked files
git add . sirve para agregar al staging area archivos nuevos así como tambien modificaciones a archivos que ya existen

git diff	muestra las diferencias en el archivo entre la última versión commiteada y la versión que se está modificando
el nombre del archivo con --- a/..... es la versión que está en el repository
mientras que el que está con +++ b/.... es lo que tengo en el working (en blanco las lineas que ya estaban y en verde las nuevas lineas)

diff por defecto compara el working con el staging
git diff --staged	muestra las diferencias entre los archivos que están en el staging y en el repository (no las diferencias entre staging y el working)

borrar archivos:
al borrar archivos que todavía no fueron agregados al staging no pasa nada porque los archivos todavía no fueron trackeados.
para tratar con archivos que ya fueron commietados se puede
	borrar el archivo directamente en el ditectorio (requiere hacer un rm y un commit para que git deje de trackearlo)
	git rm nombreArchivo	lo remueve del staging area, por lo tanto no hay que hacer el add. OJO que lo elimina tambien del working (directorio) pero sin mandarlo a la papelera, lo elimina y no hay forma de recuperarlo.

mover y renombrar archivos: mover y renombrar se usan con el mismo comando
git mv nombreActual nuevoNombre		te actualiza el nombre del archivo
git mv nombreArchivo carpeta/nombreArchivo	lo cambia de ubicación
	
git diff --color-words		te muestra en colores diferentes (rojo y verde) las lineas que sufrieron modificaciones.


Stage y commit atajo:
git commit -am "mensaje" 	git commit -a -m "mensaje" 	son lo mismo
gut commit --all
agrega y commitea TODOS los cambios de archivos trackeados. si tengo archivos que no fueron trackeados todavía (archivos nuevos) estos no serán incluidos. si los quiero incluir tendré que hacer un add y un commit por separado.	-> funciona para cuando se edita archivos 

Show commits:
git show 260885		es como si fuera un git diff pero aplicado al commit que tiene ese id (sha o checksum)	de 6 a 8 caracteres alcanza para que git reconozca el commit correcto
tambien le puedo agregar --color-words para que resalte solo las palabras modificadas 

Compare commits:
git diff 9e98601..260885b2 --color-words	compara esos dos commits específicos
git diff 9e98601..HEAD --color-words		compara con el commit HEAD

Commits multilinea:
git commit -a		abre el editor de texto que se tiene configurado para ingresar una descripción. las lineas que empiecen con # serán ignoradas y si el mensaje está vacío se aborta el commit. para guardar el commit basta con cerrar el editor (no se necesita guardar)

git log --oneline	devuelve todas las primeras lineas de cada commit (los ultimos cinco)


Atomics Commits:	buena practica
Son lo mas pequeño posible, afectan a un solo aspecto
son faciles de entender para trabajar con ellos y encontrar bugs
mejora la colaboracion con otros
tratar de que por mas de que se haga muchas modificaciones en archivos diferentes se hagan commits separados en los cuales se commitee cada funcionalidad o correccion por separado.


Deshaciendo cambios en working directory:
git checkout -- nombreArchivo 	descarta los cambios en el working
git checkout -- . 	descarta los cambios de todos

Unstaged files:
git reset HEAD nombreArchivo		saca del staging area al archivo

Amend commits:	incluye cambios en el ultimo commit
git commit --amend -m "mensaje"		te agrega el cambio, cambia el mje del commit y cambia el sha. tambien puedo hacer el commit --amend solo pasandole un nuevo mje. cambia el sha y actualiza el mje del commit pero los cambios son los mismos.


Obteniendo versiones viejas:
git checkout 2b6c94b -- nombreArchivo		vuelve el archivo que se commiteo al staging area


Revertir un commit:
git revert 2b6c94b65		abre un editor de texto para modificar el mje del commit y crea un nuevo commit con el nuevo mje en el cual se revierte el commit. por lo tanto si se hace un log entonces aparecerá el nuevo commit con el revert y el archivo estará en el staging area

Remover archivos untrackeados:
git clean -n		te avisa que va a remover los archivos no trackeados
git clean -f		los remueve sin pasar por la papelera


Git ignore:

usa expresiones regulares para crear reglas acerca de lo que no tiene que trackear
por ej *.php ignora todos los de ese tipo.
	!index.php aclara que a ese no tiene que ignorarlo
	assets/videos/	ignora todo lo que haya en la carpeta
	# es para comentar
	las lineas blancas son salteadas
se crea un archivo .gitignore y adentro se especifica lo que se quiere ignorar

cosas a ignorar: codigo fuente compilado, paquetes y archivos comprimidos, logs y databases, archivos generados por el sistema operativo, imágenes cargadas por el usuario (images, pdfs, videos, etc)

https://github.com/github/gitignore	es un repo con distintos gitignore para diferentes lenguajes


Globally Ignore files:
git config --global core.excludesfile ~/gitignore_global


Ignore tacked files:
cuando quiero ignorar un archivo que está trackeado debo agregarlo en el gitignore, sacarlo del repo y ponerlo en el staging. git rm --cached nombreArchivo.txt	
asi el gitignore lo puede ignorar. para esto hay que hacer un nuevo commit en el que se borrarra nombreArchivo y desde ahí funcionará el gitignore por mas de que modifiquemos el archivo que se quiere ignorar.


Track empty directories:
git ls-tree HEAD	te muesra todos los directorios y archivos. pero no trackea los nuevos directorios que agregue y esten vacíos. para contemplarlos para lo que sea que se los necesite hay que asegurarse de que no estén vacíos incluyendo archivos como .gitkeep
cuando hago el add de la carpeta va a aparecer que está el archivo nuevo .gitkeep pero despues del commit si hacemos un status veremos que ese archivo no se guarda.
touch .gitkeep te crea el archivo por consola


certificado del curso:

https://www.linkedin.com/learning/certificates/aa607704dd797ce64167a4e0235c97a3f2fd1a31ddf55b32e4d06344d346e2be?trk=share_certificate
